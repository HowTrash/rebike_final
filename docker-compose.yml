version: "3.8"

volumes:
  elasticsearch_volume:
  static_volume: null
  media_volume: null
  build_folder: null

services:
  backend:
    build: ./backend
    command: >
      bash -c "python setup_es.py &&
               python manage.py makemigrations &&
               python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8080"
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
    depends_on:
      elasticsearch:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      args:
        API_URL: "*"
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8000
    volumes:
      - ./frontend/:/frontend
      - build_folder:/frontend/build
      - ./frontend/node_modules/:/frontend/node_modules
    tty: true

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/config/:/etc/prometheus/
    ports:
      - 9090:9090
    command:
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - 3100:3100
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    restart: always

  redis:
    container_name: redis
    image: redis:latest
    hostname: redis
    ports:
      - "6379:6379"

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    ports:
      - "5672:5672" # Default Port
      - "15672:15672" # For UI
    expose:
      - "15672"
    
  celery_worker:
    container_name: celery_worker
    build:
      context: ./backend
      dockerfile: dockerfile
    volumes:
      - ./backend:/backend
    ports: []
    depends_on:
      - rabbitmq
      - redis
      - backend
    environment:
      - C_FORCE_ROOT=true
    command: sh -c "celery -A backend worker --loglevel=info"

  elasticsearch:
    build:
      context: elastic_search/
      args:
        ELK_VERSION: 7.16.3
    restart: always
    volumes:
      - ./elastic_search/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch_volume:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      discovery.type: single-node
    healthcheck:
      test: curl -u elastic:elastic -s -f elasticsearch:9200/_cat/health >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    build: ./nginx
    ports:
      - 80:8080
    volumes:
      - static_volume:/backend/staticfiles
      - media_volume:/backend/mediafiles
      - build_folder:/var/www/frontend
    depends_on:
      - backend
      - frontend

  kibana:
    container_name: kibana
    image: kibana:7.16.3
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8090:8090
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - redis
    command:
      - '-port=8090'
